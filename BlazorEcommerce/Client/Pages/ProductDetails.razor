@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if (product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
            }
            else
            {
                <MudCarousel Class="mud-width-full" ItemsSource="@product.Images" Style="height: 200px;">
                    <ItemTemplate>
                        <MudImage Src="@context.Data"></MudImage>>
                    </ItemTemplate>
                </MudCarousel>
            }
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>

            <h5>@product.Description</h5>

            <h2 style="padding: 20px 0 20px 100px; color: red" class="mb-0">Thông số kĩ thuật</h2>


            <div class="content__left-sub">
                <div class="content__left-key">
                    <ul class="content__left-key-list">
                        <li class="content__left-key-child">Hệ điều hành:</li>
                        <li class="content__left-key-child">Màn hình:</li>
                        <li class="content__left-key-child">Công nghệ màn hình:</li>
                        <li class="content__left-key-child">Pin:</li>
                        
                    </ul>
                </div>

                <div class="content__left-value">
                    <ul class="content__left-key-list">
                        <li class="content__left-value-child">@product.System</li>
                        <li class="content__left-value-child">@product.Screen</li>
                        <li class="content__left-value-child">@product.ScreenTechnology</li>
                        <li class="content__left-value-child">@product.Battery</li>
                    </ul>
                </div>
            </div>


            
            @if (product.Variants != null && product.Variants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() != null)
                
            {
                @if (GetSelectedVariant().OriginalPrice >  GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        @string.Format("{0:0,0 đ}",GetSelectedVariant().OriginalPrice)
                    </h6>
                }
                <h4 class="price">
                    @string.Format("{0:0,0 đ}",GetSelectedVariant().Price)
                </h4>
                
                <h4 class="rating">
                    <span class="fa fa-star checked"></span>
                    <span class="fa fa-star checked"></span>
                    <span class="fa fa-star checked"></span>
                    <span class="fa fa-star"></span>
                    <span class="fa fa-star"></span>
                </h4>
                }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Thêm vào giỏ hàng
            </button>
        </div>
    </div>

}

@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product...";

        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }
}
